generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                String        @id @default(cuid())
  firstName         String?
  lastName          String?
  name              String?
  email             String?       @unique
  emailVerified     Boolean?
  emailVerifiedDate DateTime?
  password          String?       @db.Text
  image             String?
  address           String?
  active            Boolean?      @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime?     @updatedAt
  balance           String?
  quotes            Quote[]
  invoices          Invoice[]
  payments          Payment[]
  note              String?       @db.Text
  role              ROLE          @default(USER)
  accounts          Account[]
  sessions          Session[]
  task              Task[]
  cars              CustomerCar[]
  jobs              Job[]
  tempUser          TempUser[]

  @@index([email])
}

enum ROLE {
  USER
  ADMIN
}

model TempUser {
  id        String   @id @default(cuid())
  firstName String?
  lastName  String?
  name      String?
  email     String?  @unique
  address   String?
  active    Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  type              String?
  provider          String?
  providerAccountId String?
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        String?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @db.VarChar(512)
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  token   String   @unique
  expires DateTime
}

model CustomerCar {
  id                 String             @id @default(cuid())
  make               String?
  model              String?
  year               String?
  vin                String?            @unique
  mileage            Float?
  gearType           String?
  color              String?
  licensePlate       String?
  registrationDate   DateTime?
  insuranceCompany   String?
  insurancePolicy    String?
  insuranceExpiry    DateTime?
  serviceHistory     ServiceHistory[]
  featuresAndOptions String?
  fuelType           String?
  previousOwners     PreviousOwner[]
  accidents          Accident[]
  warrantyStart      DateTime?
  warrantyEnd        DateTime?
  tireInformation    TireInformation?
  vehicleInspection  VehicleInspection?
  specs              Json?
  picture            String?
  Job                Job?

  ownerId String?
  owner   User?   @relation(fields: [ownerId], references: [id])

  showcaseCarId String?
  ShowcaseCar   ShowcaseCar? @relation(fields: [showcaseCarId], references: [id])

  @@index([ownerId])
  @@index([showcaseCarId])
}

model ServiceHistory {
  id          String      @id @default(cuid())
  carId       String
  car         CustomerCar @relation(fields: [carId], references: [id])
  serviceDate DateTime
  description String?
  cost        Float?

  @@index([carId])
}

model PreviousOwner {
  id       String      @id @default(cuid())
  carId    String
  car      CustomerCar @relation(fields: [carId], references: [id])
  name     String
  contact  String
  fromDate DateTime
  toDate   DateTime

  @@index([carId])
}

model Accident {
  id          String      @id @default(cuid())
  carId       String
  car         CustomerCar @relation(fields: [carId], references: [id])
  date        DateTime
  description String
  repairCost  Float

  @@index([carId])
}

model TireInformation {
  id         String      @id @default(cuid())
  carId      String      @unique
  car        CustomerCar @relation(fields: [carId], references: [id])
  tireType   String
  tireSize   String
  treadDepth Float
}

model VehicleInspection {
  id             String      @id @default(cuid())
  carId          String      @unique
  car            CustomerCar @relation(fields: [carId], references: [id])
  inspectionDate DateTime
  emissionsTest  String
  safetyCheck    String
}

model ShowcaseCar {
  id                                String             @id @default(cuid())
  make                              String
  model                             String
  generation                        String?
  modification                      String?
  productionYears                   String?
  powertrainArchitecture            String?
  bodyType                          String?
  seats                             String?
  doors                             String?
  combinedFuelConsumption           Float?
  co2EmissionsWLTP                  Float?
  fuelConsumptionUrban              Float?
  fuelConsumptionExtraUrban         Float?
  fuelConsumptionCombined           Float?
  fuelType                          String?
  acceleration0to100                Float?
  maximumSpeed                      String?
  emissionStandard                  String?
  weightToPowerRatio                Float?
  weightToTorqueRatio               Float?
  enginePower                       String?
  powerPerLitre                     Float?
  torque                            String?
  engineLayout                      String?
  engineModelCode                   String?
  engineDisplacement                Float?
  numberOfCylinders                 String?
  engineConfiguration               String?
  cylinderBore                      Float?
  pistonStroke                      Float?
  compressionRatio                  Float?
  fuelInjectionSystem               String?
  engineAspiration                  String?
  valvetrain                        String?
  engineOilCapacity                 Float?
  engineOilSpecification            String?
  engineSystems                     String?
  kerbWeight                        Float?
  maxWeight                         Float?
  maxLoad                           Float?
  trunkSpaceMin                     Float?
  trunkSpaceMax                     Float?
  fuelTankCapacity                  Float?
  maxRoofLoad                       Float?
  permittedTrailerLoadWithBrakes    Float?
  permittedTrailerLoadWithoutBrakes Float?
  permittedTowbarDownload           Float?
  length                            Float?
  width                             Float?
  widthIncludingMirrors             Float?
  height                            Float?
  wheelbase                         Float?
  frontTrack                        Float?
  rearTrack                         Float?
  frontOverhang                     Float?
  rearOverhang                      Float?
  rideHeight                        Float?
  dragCoefficient                   Float?
  minimumTurningCircle              Float?
  approachAngle                     Float?
  departureAngle                    Float?
  rampOverAngle                     Float?
  climbAngle                        Float?
  wadingDepth                       Float?
  drivetrainArchitecture            String?
  driveWheel                        String?
  numberOfGears                     String?
  gearboxType                       String?
  frontSuspension                   String?
  rearSuspension                    String?
  frontBrakes                       String?
  rearBrakes                        String?
  assistingSystems                  String?
  steeringType                      String?
  powerSteering                     String?
  tiresSize                         String?
  wheelRimsSize                     String?
  image                             Image[]
  CustomerCar                       CustomerCar[]
  availableServices                 AvailableService[] @relation("CarServices")
}

model Image {
  id              Int          @id @default(autoincrement())
  make            String?
  model           String?
  yearsProduction String?
  filename        String?
  carPose         POSE         @default(FRONT)
  car             ShowcaseCar? @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId           String?
  url             String?

  @@index([carId])
}

enum POSE {
  FRONT
  SIDE
  BACK
}

model AvailableService {
  id                  String        @id @default(cuid())
  category            String
  title               String
  price               String?
  duration            String?
  dificulty           String?
  active              Boolean?      @default(true)
  availableForAllCars Boolean?      @default(true)
  jobId               String?
  job                 Job?          @relation(fields: [jobId], references: [id])
  timestamp           DateTime      @default(now())
  tasks               Task[]
  // quotes    Quote[]
  // invoices  Invoice[]
  ShowcaseCar         ShowcaseCar[] @relation("CarServices")

  @@index([jobId])
}

model Task {
  id          String             @id @default(cuid())
  userId      String?
  user        User?              @relation(fields: [userId], references: [id])
  title       String?
  description String?
  aserviceId  String?
  services    AvailableService[] // Define a relation to available services
  jobId       String? // Added jobId field to represent the relationship with Job
  // Remove the index below if there's no `operationId` field
  // @@index([operationId])
  Job         Job?               @relation(fields: [jobId], references: [id])

  @@index([userId])
  @@index([aserviceId])
  @@index([jobId])
}

model Job {
  id               String             @id @default(cuid())
  name             String
  category         String
  time             Int
  price            Float
  carId            String             @unique
  car              CustomerCar        @relation(fields: [carId], references: [id])
  AvailableService AvailableService[]
  users            User[]

  tasks   Task[] // One job can have multiple tasks
  Quote   Quote[]
  Invoice Invoice[]
  Payment Payment[]

  @@index([carId])
}

model Quote {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  quoteNumber String    @unique
  date        DateTime
  total       Float
  Job         Job?      @relation(fields: [jobId], references: [id])
  jobId       String?
  // Operation   Operation? @relation(fields: [operationId], references: [id])
  // operationId String?
  Invoice     Invoice[]

  @@index([userId])
  @@index([jobId])
}

model Invoice {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  invoiceNumber String    @unique
  date          DateTime
  total         Float
  Payment       Payment[]

  Quote   Quote?  @relation(fields: [quoteId], references: [id])
  quoteId String?
  Job     Job?    @relation(fields: [jobId], references: [id])
  jobId   String?

  @@index([userId])
  @@index([quoteId])
  @@index([jobId])
}

model Payment {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  paymentDate   DateTime
  amount        Float
  paymentMethod String
  Invoice       Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId     String?
  Job           Job?     @relation(fields: [jobId], references: [id])
  jobId         String?

  @@index([userId])
  @@index([invoiceId])
  @@index([jobId])
}
