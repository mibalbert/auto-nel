generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                String      @id @default(cuid())
  firstName         String?
  lastName          String?
  name              String?
  email             String?     @unique
  emailVerified     Boolean?
  emailVerifiedDate DateTime?
  password          String?     @db.Text
  image             String?
  address           String?
  active            Boolean?    @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  balance           Int?
  quotes            Quote[] // Added quotes relation
  invoices          Invoice[] // Added invoices relation
  payments          Payment[] // Added payments relation
  note              String?     @db.Text
  role              ROLE
  accounts          Account[]
  sessions          Session[]
  task              Task[]
  cars              Car[]
  jobs              Job[]
  tempUser          TempUser[]
  Operation         Operation[]

  @@index([email])
}

model TempUser {
  id        String   @id @default(cuid())
  firstName String?
  lastName  String?
  name      String?
  email     String?  @unique
  address   String?
  active    Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ROLE {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @db.VarChar(512)
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  token   String   @unique
  expires DateTime
}

model Car {
  id        Int         @id @default(autoincrement())
  make      String
  model     String
  year      Int
  ownerId   String
  owner     User        @relation(fields: [ownerId], references: [id])
  specs     Json
  picture   String
  Operation Operation[]
  Job       Job?

  @@index([ownerId])
}

model Operation {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  carId     Int
  car       Car      @relation(fields: [carId], references: [id])
  jobId     Int
  job       Job      @relation(fields: [jobId], references: [id])
  timestamp DateTime @default(now())
  tasks     Task[]
  // quotes    Quote[]
  // invoices  Invoice[]

  @@index([userId])
  @@index([jobId])
  @@index([carId])
}

model Task {
  id          Int        @id @default(autoincrement())
  userId      String
  user        User?      @relation(fields: [userId], references: [id])
  title       String
  description String?
  operationId Int?
  operation   Operation? @relation(fields: [operationId], references: [id])
  Job         Job?       @relation(fields: [jobId], references: [id])
  jobId       Int?

  @@index([userId])
}

model Job {
  id        Int         @id @default(autoincrement())
  name      String
  category  String
  time      Int
  price     Float
  carId     Int         @unique
  car       Car         @relation(fields: [carId], references: [id])
  Operation Operation[]
  userId    String // A job belongs to one user
  user      User?       @relation(fields: [userId], references: [id])

  tasks   Task[] // One job can have multiple tasks
  Quote   Quote[]
  Invoice Invoice[]

  @@index([carId])
}

model Quote {
  id          Int       @id @default(autoincrement())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  quoteNumber String    @unique
  date        DateTime
  total       Float
  Job         Job?      @relation(fields: [jobId], references: [id])
  jobId       Int?
  // Operation   Operation? @relation(fields: [operationId], references: [id])
  // operationId Int?
  Invoice     Invoice[]

  @@index([userId])
}

model Invoice {
  id            Int       @id @default(autoincrement())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  invoiceNumber String    @unique
  date          DateTime
  total         Float
  Payment       Payment[]

  Quote   Quote? @relation(fields: [quoteId], references: [id])
  quoteId Int?
  Job     Job?   @relation(fields: [jobId], references: [id])
  jobId   Int?

  @@index([userId])
}

model Payment {
  id            Int      @id @default(autoincrement())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  paymentDate   DateTime
  amount        Float
  paymentMethod String
  Invoice       Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId     Int?

  @@index([userId])
}

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider     = "mysql"
//   url          = env("DATABASE_URL")
//   relationMode = "prisma"
// }

// model User {
//   id                   String                @id @default(cuid())
//   firstName            String?
//   lastName             String?
//   name                 String?
//   email                String?               @unique
//   emailVerified        DateTime?
//   password             String?               @db.Text
//   image                String?
//   address              String?
//   active               Boolean?              @default(true)
//   createdAt            DateTime              @default(now())
//   updatedAt            DateTime              @default(now()) @updatedAt
//   balance              Int?                  @default(0)
//   quotes               Quote[] // Added quotes relation
//   invoices             Invoice[] // Added invoices relation
//   payments             Payment[] // Added payments relation
//   note                 String?               @db.Text
//   role                 ROLE
//   accounts             Account[]
//   sessions             Session[]
//   task                 Task[]
//   cars                 Car[]
//   interventionServices InterventionService[]

//   @@index([email])
// }

// model Task {
//   id                   Int                   @id @default(autoincrement())
//   userId               String
//   user                 User                  @relation(fields: [userId], references: [id])
//   title                String
//   description          String?
//   interventionServices InterventionService[]

//   @@index([userId])
// }

// enum ROLE {
//   USER
//   ADMIN
// }

// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([userId, provider, providerAccountId])
//   @@index([userId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique @db.VarChar(512)
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@index([userId])
// }

// model VerificationToken {
//   token   String   @unique
//   expires DateTime
// }

// model Car {
//   id                   Int                   @id @default(autoincrement())
//   make                 String
//   model                String
//   year                 Int
//   ownerId              String
//   owner                User                  @relation(fields: [ownerId], references: [id])
//   specs                Json
//   picture              String
//   interventionServices InterventionService[]
//   carOperations        CarOperations?

//   @@index([ownerId])
// }

// model InterventionService {
//   id     Int    @id @default(autoincrement())
//   userId String
//   user   User   @relation(fields: [userId], references: [id])

//   carId           Int
//   car             Car           @relation(fields: [carId], references: [id])
//   carOperationsId Int
//   carOperations   CarOperations @relation(fields: [carOperationsId], references: [id])
//   timestamp       DateTime      @default(now())
//   tasks           Task[]

//   @@index([userId])
//   @@index([carOperationsId])
//   @@index([carId])
// }

// model CarOperations {
//   id                   Int                   @id @default(autoincrement())
//   name                 String
//   category             String
//   time                 Int
//   price                Float
//   carId                Int                   @unique
//   car                  Car                   @relation(fields: [carId], references: [id])
//   interventionServices InterventionService[]

//   @@index([carId])
// }

// model Quote {
//   id          Int         @id @default(autoincrement())
//   userId      String
//   user        User        @relation(fields: [userId], references: [id])
//   quoteNumber String      @unique
//   date        DateTime
//   items       QuoteItem[]
//   total       Float

//   @@index([userId])
// }

// model QuoteItem {
//   id          Int    @id @default(autoincrement())
//   quoteId     Int
//   quote       Quote  @relation(fields: [quoteId], references: [id])
//   description String
//   quantity    Int
//   price       Float

//   @@index([quoteId])
// }

// model Invoice {
//   id            Int           @id @default(autoincrement())
//   userId        String
//   user          User          @relation(fields: [userId], references: [id])
//   invoiceNumber String        @unique
//   date          DateTime
//   items         InvoiceItem[]
//   total         Float

//   @@index([userId])
// }

// model InvoiceItem {
//   id          Int     @id @default(autoincrement())
//   invoiceId   Int
//   invoice     Invoice @relation(fields: [invoiceId], references: [id])
//   description String
//   quantity    Int
//   price       Float

//   @@index([invoiceId])
// }

// model Payment {
//   id            Int      @id @default(autoincrement())
//   userId        String
//   user          User     @relation(fields: [userId], references: [id])
//   paymentDate   DateTime
//   amount        Float
//   paymentMethod String

//   @@index([userId])
// }
