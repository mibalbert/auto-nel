/**
 * Hero2.jsx
 */

"use client"

import { Button } from "@/components/ui/button";
import Image from "next/image";

import { FaAngleDown } from "react-icons/fa6";
import { useEffect, useState } from "react";
import axios from "axios";

const getAllShowcaseCars = async () => {
  try {
    const response = await axios.get('http://localhost:3000/api/admin/get-all-showcase-cars');
    console.log(response.data)


    return response.data;
  } catch (error) {
    console.error(error);
    return null;
  }
}

const Hero2 = () => {
  const [data, setData] = useState(null);
  const [selectedMake, setSelectedMake] = useState('Mercedes');
  const [selectedModel, setSelectedModel] = useState('GLE 350d 4Matic (W223)');
  const [selectedYear, setSelectedYear] = useState('2015-2020');
  const [makeOptions, setMakeOptions] = useState([]); // Store make options
  const [modelOptions, setModelOptions] = useState([]); // Store model options
  const [yearOptions, setYearOptions] = useState([]); // Store year options

  useEffect(() => {
    const fetchData = async () => {
      try {
        let result = await getAllShowcaseCars();
        result = result.allShowcaseCars
        setData(result);

        const makes = result.map(item => item.make);
        const models = result.map(item => item.model);
        const years = result.map(item => item.year);

        setMakeOptions([...new Set(makes)]);
        setModelOptions([...new Set(models)]);
        setYearOptions([...new Set(years)]);

      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };

    fetchData();
  }, []);

  const handleMakeChange = (event) => {
    setSelectedMake(event.target.value);
    // Automatically select the first model when make changes
    setSelectedModel(modelOptions[0] || '');
    // Clear selected year when make changes
    setSelectedYear('');
  };

  const handleModelChange = (event) => {
    setSelectedModel(event.target.value);
    // Clear selected year when model changes
    setSelectedYear('');
  };

  const handleYearChange = (event) => {
    setSelectedYear(event.target.value);
  };

  return (
    <section className="min-h-[90vh] bg-gradient-to-b from-transparent via-transparent to-[#ecedef] dark:to-[#1c1c1c] relative overflow-hidden">
      <div className="absolute top-[30%] left-0 z-0 text-[300px] whitespace-nowrap font-bold font-serif bg-neutral-700 text-neutral-200 border-y border-dashed">AUTO-NEL AUTO-NEL</div>
      <div className="absolute top-0 left-0 z-50 w-full h-full"><div className="z-10 w-full h-full mx-auto border-dashed max-w-7xl border-x"></div> </div>
      <div className="absolute bottom-0 left-0 w-[90%] md:w-[70%] lg:w-[60%] xl:w-[50%] 2xl:w-[40%] h-full z-50">
        <Image
          src="/2019_mb_g63_amg_0000-first-side.png"
          alt="saa"
          width={500}
          height={500}
          className="z-50 object-contain w-full h-full"
        />
      </div>
      <div className="relative w-full h-full">
        <div className="z-50 w-full h-full flex flex-col items-center pt-[7%] relative">
          <div className=" w-[95%] max-w-4xl supports-backdrop-blur:bg-[#1c1c1c]/60  bg-[#dfdfdf]/75 dark:bg-[#1c1c1c]/75 backdrop-blur px-10 pt-7 pb-10 rounded-lg">
            <div className="absolute text-2xl -top-5 left-10">Search For A Service</div>
            <form className="grid grid-cols-4 gap-5 ">
              <div className="col-span-1">
                <div className="flex flex-col gap-2">
                  <label htmlFor="make" className="text-neutral-400">Make:</label>
                  <div className="relative inline-block">
                    <select
                      name="make"
                      id="make"
                      className="w-full px-4 py-2 pr-8 border rounded-md appearance-none bg-neutral-700 focus:outline-none focus:ring focus:border-blue-500"
                      value={selectedMake}
                      onChange={handleMakeChange}
                    >
                      {makeOptions.map((make, idx) => (
                        <option key={idx} value={make}>{make}</option>
                      ))}
                    </select>
                    <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                      <FaAngleDown />
                    </div>
                  </div>
                </div>
              </div>
              <div className="col-span-1 ">
                <div className="flex flex-col gap-2">
                  <label htmlFor="model" className="text-neutral-400">Model:</label>
                  <div className="relative inline-block">
                    <select
                      name="model"
                      id="model"
                      className="w-full px-4 py-2 pr-8 border rounded-md appearance-none bg-neutral-700 focus:outline-none focus:ring focus:border-blue-500"
                      value={selectedModel}
                      onChange={handleModelChange}
                    >
                      {modelOptions.map((model, idx) => (
                        <option key={idx} value={model}>{model}</option>
                      ))}
                    </select>
                    <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                      <FaAngleDown />
                    </div>
                  </div>
                </div>
              </div>
              <div className="col-span-1 ">
                <div className="flex flex-col gap-2">
                  <label htmlFor="year" className="text-neutral-400">Year:</label>
                  <div className="relative inline-block">
                    <select
                      name="year"
                      id="year"
                      className="w-full px-4 py-2 pr-8 border rounded-md appearance-none bg-neutral-700 focus:outline-none focus:ring focus:border-blue-500"
                      value={selectedYear}
                      onChange={handleYearChange}
                    >
                      {yearOptions.map((year, idx) => (
                        <option key={idx} value={year}>{year}</option>
                      ))}
                    </select>
                    <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                      <FaAngleDown />
                    </div>
                  </div>
                </div>
              </div>
              <div className="flex items-end col-span-1">
                <Button type="submit" className="w-full ">Search</Button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </section>
  );
};

export default Hero2;








function useCarMake() {
  const fetcher = (...args) => fetch(...args).then(res => res.json())
  const { data, error, isLoading } = useSWR(`/api/user/get-showcase-car-make`, fetcher)
  return data
}
function useCarModel() {
  const fetcher = (...args) => fetch(...args).then(res => res.json())
  const { data, error, isLoading } = useSWR(`/api/user/get-showcase-car-model`, fetcher)
  return data
}










/**
 * Hero2.js
 */

"use client";
import Image from "next/image";

import React, { useState, useEffect, useCallback } from "react";
import { useSearchParams } from "next/navigation";
import SearchBar from "@/components/created/searchBar/SearchBar";
import { Icons } from "@/components/ui/icons";
import { FaSearch } from "react-icons/fa";
import servData from "@/lib/servData.json";
import useEmblaCarousel from "embla-carousel-react";
import { motion } from "framer-motion";
import Link from "next/link";
import { Input } from "@/components/ui/input";
import { Button } from "@nextui-org/button";

const Hero = () => {
  const searchParams = useSearchParams();
  let initialSearch = searchParams.get("name");

  const [searchTerm, setSearchTerm] = useState("");
  const [searchResults, setSearchResults] = useState([]);
  const [isLoading, setIsLoading] = useState(false);

  const handleChange = (event) => {
    const newSearchTerm = event.target.value;
    setSearchTerm(newSearchTerm);
  };

  useEffect(() => {
    searchForServices(searchTerm);
  }, [searchTerm]);

  const searchForServices = (term) => {
    const result = servData.filter((el) => el.href.includes(term));
    setSearchResults(result);
  };
  const [scrollProgress, setScrollProgress] = useState(0);

  const [emblaRef, emblaApi] = useEmblaCarousel({
    loop: false,
    dragFree: true,
    align: "center",
    containScroll: "trimSnaps",
  });

  const onScroll = useCallback((emblaApi) => {
    const progress = Math.max(0, Math.min(1, emblaApi.scrollProgress()));
    setScrollProgress(progress * 100);
  }, []);

  useEffect(() => {
    if (!emblaApi) return;

    onScroll(emblaApi);
    emblaApi.on("reInit", onScroll);
    emblaApi.on("scroll", onScroll);
  }, [emblaApi, onScroll]);

  return (
    <div className="relative overflow-hidden min-h-[75vh]">
      <div className="relative max-w-[85rem] mx-auto px-4 sm:px-6 lg:px-8 py-10  z-20  ">
        <div className="text-center">
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.35 }}
            className="pb-5 text-4xl font-bold text-transparent sm:text-[50px] bg-gradient-to-r from-blue-600 to-red-600 bg-clip-text"
          >
            Serviciile Noastre
          </motion.div>
          <div className="mt-3 text-gray-600 dark:text-gray-700">
            Stay in the know with insights from industry experts.
          </div>
          <div className="relative max-w-2xl mx-auto mt-7 sm:mt-12">
            {/* <SearchBar /> */}
            <div className="w-full ">
              {/* <div className="relative z-10 flex max-w-2xl p-1.5 bg-white border rounded-xl shadow-lg shadow-gray-900/[.2] dark:bg-gray-800 dark:border-gray-500 dark:shadow-gray-900/[.2]">
                <div className="relative w-full max-w-2xl">
                  <label
                    htmlFor="hs-search-article-1"
                    className="block text-sm font-medium text-gray-700 dark:text-white"
                  >
                    <span className="sr-only">Cauta Servicii...</span>
                  </label>
                  <div className="relative flex-[1_1_0%] z-50">
                    <input
                      type="text"
                      value={searchTerm}
                      onChange={handleChange}
                      name="hs-search-article-1"
                      id="hs-search-article-1"
                      className="block w-full p-3 border-transparent rounded-md focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-800 dark:text-gray-400"
                      placeholder="Cauta servicii..."
                    />
                    <div>
                      <FaSearch />
                    </div>
                    <div className="absolute transform -translate-y-1/2 top-1/2 right-5">
                      {isLoading ? (
                        <Icons.spinner className="transition-all duration-500 animate-spin" />
                      ) : null}
                    </div>
                  </div>
                </div>
              </div> */}
              <div>
                <label
                  htmlFor="hs-trailing-button-add-on-with-icon-and-button"
                  className="sr-only"
                >
                  Label
                </label>
                <div className="relative flex rounded-md shadow-sm">
                  <input
                    type="text"
                    value={searchTerm}
                    onChange={handleChange}
                    id="hs-trailing-button-add-on-with-icon-and-button"
                    name="hs-trailing-button-add-on-with-icon-and-button"
                    className="block w-full px-4 py-3 text-sm border-gray-200 shadow-sm pl-11 rounded-l-md focus:z-10 focus:border-blue-500 focus:ring-blue-500 dark:bg-slate-900 dark:border-gray-700 dark:text-gray-400"
                  />
                  <div className="absolute inset-y-0 left-0 z-20 flex items-center pl-4 pointer-events-none">
                    <svg
                      className="w-4 h-4 text-gray-400"
                      xmlns="http://www.w3.org/2000/svg"
                      width="16"
                      height="16"
                      fill="currentColor"
                      viewBox="0 0 16 16"
                    >
                      <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
                    </svg>
                  </div>
                  <button
                    type="button"
                    className="inline-flex items-center justify-center flex-shrink-0 px-4 py-3 text-sm font-semibold text-white transition-all bg-blue-500 border border-transparent rounded-r-md hover:bg-blue-600 focus:z-10 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    Search
                  </button>
                </div>
              </div>
            </div>
            {/* The svg Graphics */}
            <div className="absolute top-0 right-0 hidden translate-x-16 -translate-y-16 md:block">
              <svg
                className="w-16 h-auto text-orange-500"
                width="121"
                height="135"
                viewBox="0 0 121 135"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M5 16.4754C11.7688 27.4499 21.2452 57.3224 5 89.0164"
                  stroke="currentColor"
                  strokeWidth="10"
                  strokeLinecap="round"
                />
                <path
                  d="M33.6761 112.104C44.6984 98.1239 74.2618 57.6776 83.4821 5"
                  stroke="currentColor"
                  strokeWidth="10"
                  strokeLinecap="round"
                />
                <path
                  d="M50.5525 130C68.2064 127.495 110.731 117.541 116 78.0874"
                  stroke="currentColor"
                  strokeWidth="10"
                  strokeLinecap="round"
                />
              </svg>
            </div>
            {/* The svg Graphics */}
            <div className="absolute bottom-0 left-0 hidden translate-y-16 md:block -translate-x-36">
              <svg
                className="w-40 h-auto text-cyan-500"
                width="347"
                height="188"
                viewBox="0 0 347 188"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M4 82.4591C54.7956 92.8751 30.9771 162.782 68.2065 181.385C112.642 203.59 127.943 78.57 122.161 25.5053C120.504 2.2376 93.4028 -8.11128 89.7468 25.5053C85.8633 61.2125 130.186 199.678 180.982 146.248L214.898 107.02C224.322 95.4118 242.9 79.2851 258.6 107.02C274.299 134.754 299.315 125.589 309.861 117.539L343 93.4426"
                  stroke="currentColor"
                  strokeWidth="7"
                  strokeLinecap="round"
                />
              </svg>
            </div>
          </div>
          {/* The Category buttons  */}
          <div className="flex justify-center w-full mt-5 sm:mt-10">
            <a
              className="inline-flex items-center justify-center gap-2 px-4 py-3 m-1 text-sm font-medium text-gray-700 align-middle transition-all bg-white border rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-white focus:ring-blue-600 dark:bg-slate-900 dark:hover:bg-slate-800 dark:border-gray-700 dark:text-gray-400 dark:hover:text-white dark:focus:ring-offset-gray-800"
              href="#"
            >
              <svg
                className="w-3 h-auto"
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                fill="currentColor"
                viewBox="0 0 16 16"
              >
                <path d="M6.5 1A1.5 1.5 0 0 0 5 2.5V3H1.5A1.5 1.5 0 0 0 0 4.5v8A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-8A1.5 1.5 0 0 0 14.5 3H11v-.5A1.5 1.5 0 0 0 9.5 1h-3zm0 1h3a.5.5 0 0 1 .5.5V3H6v-.5a.5.5 0 0 1 .5-.5zm1.886 6.914L15 7.151V12.5a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5V7.15l6.614 1.764a1.5 1.5 0 0 0 .772 0zM1.5 4h13a.5.5 0 0 1 .5.5v1.616L8.129 7.948a.5.5 0 0 1-.258 0L1 6.116V4.5a.5.5 0 0 1 .5-.5z" />
              </svg>
              Business
            </a>
            <a
              className="inline-flex items-center justify-center gap-2 px-4 py-3 m-1 text-sm font-medium text-gray-700 align-middle transition-all bg-white border rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-white focus:ring-blue-600 dark:bg-slate-900 dark:hover:bg-slate-800 dark:border-gray-700 dark:text-gray-400 dark:hover:text-white dark:focus:ring-offset-gray-800"
              href="#"
            >
              <svg
                className="w-3 h-auto"
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                fill="currentColor"
                viewBox="0 0 16 16"
              >
                <path d="M6.5 1A1.5 1.5 0 0 0 5 2.5V3H1.5A1.5 1.5 0 0 0 0 4.5v8A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-8A1.5 1.5 0 0 0 14.5 3H11v-.5A1.5 1.5 0 0 0 9.5 1h-3zm0 1h3a.5.5 0 0 1 .5.5V3H6v-.5a.5.5 0 0 1 .5-.5zm1.886 6.914L15 7.151V12.5a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5V7.15l6.614 1.764a1.5 1.5 0 0 0 .772 0zM1.5 4h13a.5.5 0 0 1 .5.5v1.616L8.129 7.948a.5.5 0 0 1-.258 0L1 6.116V4.5a.5.5 0 0 1 .5-.5z" />
              </svg>
              Business
            </a>
            <a
              className="inline-flex items-center justify-center gap-2 px-4 py-3 m-1 text-sm font-medium text-gray-700 align-middle transition-all bg-white border rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-white focus:ring-blue-600 dark:bg-slate-900 dark:hover:bg-slate-800 dark:border-gray-700 dark:text-gray-400 dark:hover:text-white dark:focus:ring-offset-gray-800"
              href="#"
            >
              <svg
                className="w-3 h-auto"
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                fill="currentColor"
                viewBox="0 0 16 16"
              >
                <path d="M6.5 1A1.5 1.5 0 0 0 5 2.5V3H1.5A1.5 1.5 0 0 0 0 4.5v8A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-8A1.5 1.5 0 0 0 14.5 3H11v-.5A1.5 1.5 0 0 0 9.5 1h-3zm0 1h3a.5.5 0 0 1 .5.5V3H6v-.5a.5.5 0 0 1 .5-.5zm1.886 6.914L15 7.151V12.5a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5V7.15l6.614 1.764a1.5 1.5 0 0 0 .772 0zM1.5 4h13a.5.5 0 0 1 .5.5v1.616L8.129 7.948a.5.5 0 0 1-.258 0L1 6.116V4.5a.5.5 0 0 1 .5-.5z" />
              </svg>
              Business
            </a>
            <a
              className="inline-flex items-center justify-center gap-2 px-4 py-3 m-1 text-sm font-medium text-gray-700 align-middle transition-all bg-white border rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-white focus:ring-blue-600 dark:bg-slate-900 dark:hover:bg-slate-800 dark:border-gray-700 dark:text-gray-400 dark:hover:text-white dark:focus:ring-offset-gray-800"
              href="#"
            >
              <svg
                className="w-3 h-auto"
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                fill="currentColor"
                viewBox="0 0 16 16"
              >
                <path d="M6.5 1A1.5 1.5 0 0 0 5 2.5V3H1.5A1.5 1.5 0 0 0 0 4.5v8A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-8A1.5 1.5 0 0 0 14.5 3H11v-.5A1.5 1.5 0 0 0 9.5 1h-3zm0 1h3a.5.5 0 0 1 .5.5V3H6v-.5a.5.5 0 0 1 .5-.5zm1.886 6.914L15 7.151V12.5a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5V7.15l6.614 1.764a1.5 1.5 0 0 0 .772 0zM1.5 4h13a.5.5 0 0 1 .5.5v1.616L8.129 7.948a.5.5 0 0 1-.258 0L1 6.116V4.5a.5.5 0 0 1 .5-.5z" />
              </svg>
              Business
            </a>
          </div>
        </div>
        <div className="relative z-50 w-full h-full ">
          {/* <div className="overflow-hidden" ref={emblaRef}> */}
          <div className="relative gap-10 embla " ref={emblaRef}>
            {/* <div className="flex gap-10"> */}
            <div className="px-20 embla__container min-h-fit ">
              {isLoading
                ? // Show loading indicator
                null
                : searchResults.map((serv, id) => (
                  <motion.div
                    key={id}
                    initial={{ opacity: 0.3, x: 50 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ duration: 0.1, delay: 0.2 * id }}
                    className="w-full h-full embla__slide rounded-xl"
                  >
                    {/* <Link href={serv.link} className={`w-[400px] relative flex flex-col  h-full  text-xl border bg-white gap-5 px-5 py-5 mt-10  w-2xl max-h-[400px]`}> */}
                    <Link
                      href={serv.link}
                      className="flex flex-col w-full h-full p-10 embla__link "
                    >
                      <div className="w-full h-full">
                        <Image
                          src={"/amg.jfif"}
                          alt="Car Image"
                          width={300}
                          height={300}
                          className="object-cover w-full h-full "
                        />
                      </div>
                      <div className="w-full">
                        <div>
                          <h1 className="text-2xl">{serv.title}</h1>
                          <div className="text-md">{serv.description}</div>
                        </div>
                        <div>
                          <p>Card Content</p>
                        </div>
                        <div>
                          <p>Card Footer</p>
                        </div>
                      </div>
                    </Link>
                  </motion.div>
                ))}
            </div>
            <div className="mt-20 embla__progress">
              <div
                className="embla__progress__bar"
                style={{ transform: `translate3d(${scrollProgress}%,0px,0px)` }}
              />
            </div>
          </div>
        </div>
        <Button>Click me</Button>

        <div className="h-screen">lkasd</div>
      </div>
    </div>
  );
};

export default Hero;









/**
 * Hero2.jsx
 */

"use client";
import Image from "next/image";
import { useRouter } from "next/navigation"; // Changed from next/navigation to next/router
import { useSearchParams } from "next/navigation"; // Changed from next/navigation to next/router
import { useEffect, useState } from "react";

const baseCar = {
  make: "Mercedes",
  model: "S-Class",
  productionYears: "2015-2020",
};

// Helper functions
const getMake = (data) => {
  return new Set(data.map((el) => el.make));
};

const getModelsForMake = (make, data) => {
  const models = data
    .filter((el) => el.make === make)
    .map((el) => el.model);
  return new Set(models);
};

const getProductionYearsForModel = (model, data) => {
  const years = data
    .filter((el) => el.model === model)
    .map((el) => el.productionYears);
  return new Set(years);
};

const Hero2 = ({ carsData }) => {
  const router = useRouter();

  const [make, setMake] = useState(baseCar.make);
  const [model, setModel] = useState(baseCar.model);
  const [years, setYears] = useState(baseCar.productionYears);
  const [availableModels, setAvailableModels] = useState([]);
  const [availableYears, setAvailableYears] = useState([]);

  useEffect(() => {
    setAvailableModels(Array.from(getModelsForMake(make, carsData)));
  }, [make, carsData]);

  useEffect(() => {
    if (model) {
      setAvailableYears(Array.from(getProductionYearsForModel(model, carsData)));
    } else {
      setAvailableYears([]);
    }
  }, [model, carsData]);

  const handleMakeChange = (e) => {
    const newMake = e.target.value;
    setMake(newMake);
    setModel(""); // Reset model when changing make
    setYears(""); // Reset years when changing make
    router.push(`/?make=${newMake}&model=undefined&years=undefined`);
  };

  const handleModelChange = (e) => {
    const newModel = e.target.value;
    setModel(newModel);
    setYears(""); // Reset years when changing model
    router.push(`/?make=${make}&model=${newModel}&years=undefined`);
  };

  const handleYearsChange = (e) => {
    const newYears = e.target.value;
    setYears(newYears);
    router.push(`/?make=${make}&model=${model}&years=${newYears}`);
  };

  const makes = Array.from(getMake(carsData));

  return (
    <section className="min-h-[90vh] bg-gradient-to-b from-transparent via-transparent to-[#ecedef] dark:to-[#1c1c1c] relative overflow-hidden">
      <div className="absolute top-[30%] left-0 z-0 text-[300px] whitespace-nowrap font-bold font-serif bg-neutral-200 dark:bg-neutral-700 text-neutral-400 dark:text-neutral-300 border-y border-dashed">AUTO-NEL AUTO-NEL</div>
      <div className="absolute top-0 left-0 z-50 w-full h-full"><div className="z-10 w-full h-full mx-auto border-dashed max-w-7xl border-x"></div> </div>
      <div className="absolute bottom-0 left-0 w-[90%] md:w-[70%] lg:w-[60%] xl:w-[50%] 2xl:w-[40%] h-full z-50">
        <Image
          src="/2019_mb_g63_amg_0000-first-side.png"
          alt="saa"
          width={500}
          height={500}
          className="z-50 object-contain w-full h-full"
        />
      </div>
      <div className="relative w-full h-full">
        <div className="z-50 w-full h-full flex flex-col items-center pt-[7%] relative">
          <div className=" w-[95%] max-w-4xl supports-backdrop-blur:bg-[#1c1c1c]/60  bg-[#dfdfdf]/75 dark:bg-[#1c1c1c]/75 backdrop-blur px-10 pt-7 pb-10 rounded-lg shadow-lg">
            <div className="absolute text-2xl -top-5 left-10">Search For A Service</div>

            <form className="grid grid-cols-4 gap-5">
              <div className="flex flex-col col-span-1 gap-2">
                <label className="text-lg font-semibold text-neutral-400">Make</label>
                <select value={baseCar.make} onChange={handleMakeChange} className="w-full p-3 rounded-lg">
                  {makes.map((el, idx) => (
                    <option key={idx} value={el}>
                      {el}
                    </option>
                  ))}
                </select>
              </div>

              <div className="flex flex-col col-span-1 gap-2">
                <label className="text-lg font-semibold text-neutral-400">Model</label>
                <select value={model} onChange={handleModelChange} className="w-full p-3 rounded-lg" disabled={!make}>
                  <option value={baseCar.model}>{baseCar.model}</option>
                  {availableModels.map((el, idx) => (
                    <option key={idx} value={el}>
                      {el}
                    </option>
                  ))}
                </select>
              </div>

              <div className="flex flex-col col-span-1 gap-2">
                <label className="text-lg font-semibold text-neutral-400">Years</label>
                <select value={years} onChange={handleYearsChange} className="w-full p-3 rounded-lg" disabled={!model}>
                  <option value={baseCar.productionYears}>{baseCar.productionYears}</option>
                  {availableYears.map((el, idx) => (
                    <option key={idx} value={el}>
                      {el}
                    </option>
                  ))}
                </select>
              </div>
            </form>
          </div>
        </div>
      </div>
    </section>
  );
};

export default Hero2;














































///////////////////////////////////////////////////////
/**
 * SearchBarSearchPage.js
 */
"use client";

import React, { useState, useEffect, useCallback } from "react";
import { useSearchParams } from "next/navigation";
import { FaSearch } from "react-icons/fa";
import { motion } from "framer-motion";
import { Icons } from "@/components/ui/icons";
import servData from "@/lib/servData.json";
import Link from "next/link";

import useEmblaCarousel from "embla-carousel-react";

const SearchPage = () => {
  const searchParams = useSearchParams();
  let initialSearch = searchParams.get("name");

  const [searchTerm, setSearchTerm] = useState("");
  const [searchResults, setSearchResults] = useState([]);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    if (initialSearch.current !== null && initialSearch.current !== undefined) {
      const searchResult = servData.filter((data) =>
        data.title.toLowerCase().includes(searchRef.current.toLowerCase())
      );
      setSearchTerm(searchResult);
    }
  }, []);

  const handleChange = (event) => {
    const newSearchTerm = event.target.value;
    setSearchTerm(newSearchTerm);
  };

  useEffect(() => {
    searchForServices(searchTerm);
  }, [searchTerm]);

  const searchForServices = (term) => {
    const result = servData.filter((el) => el.href.includes(term));
    setSearchResults(result);
  };
  const [scrollProgress, setScrollProgress] = useState(0);

  const [emblaRef, emblaApi] = useEmblaCarousel({
    loop: false,
    dragFree: true,
    align: "center",
    containScroll: "trimSnaps",
  });

  const onScroll = useCallback((emblaApi) => {
    const progress = Math.max(0, Math.min(1, emblaApi.scrollProgress()));
    setScrollProgress(progress * 100);
  }, []);

  useEffect(() => {
    if (!emblaApi) return;

    onScroll(emblaApi);
    emblaApi.on("reInit", onScroll);
    emblaApi.on("scroll", onScroll);
  }, [emblaApi, onScroll]);

  return (
    <section className="w-full min-h-screen">
      <div className="relative flex flex-col items-center py-12 bg-gradient-to-r from-green-700 to-yellow-400">
        <div className="absolute left-0 top-0 z-10 w-full h-full dark:mask-image:linear-gradient(white, transparent)">
          <div className="absolute inset-0 bg-gradient-to-r from-[#b45336] to-[#ff7575] opacity-40 dark:from-[#ff7575]/30 dark:to-[#b45336]/30 dark:opacity-100">
            <svg
              aria-hidden="true"
              className="absolute inset-x-0 inset-y-[-50%] h-[200%] w-full skew-y-[-18deg] fill-black/40 stroke-black/50 mix-blend-overlay dark:fill-white/2.5 dark:stroke-white/5"
            >
              <defs>
                <pattern
                  id=":S2:"
                  width="72"
                  height="56"
                  patternUnits="userSpaceOnUse"
                  x="-12"
                  y="4"
                >
                  <path d="M.5 56V.5H72" fill="none"></path>
                </pattern>
              </defs>
              <rect
                width="100%"
                height="100%"
                strokeWidth="0"
                fill="url(#:S2:)"
              ></rect>
              <svg x="-12" y="4" className="overflow-visible">
                <rect
                  strokeWidth="0"
                  width="73"
                  height="57"
                  x="288"
                  y="168"
                ></rect>
                <rect
                  strokeWidth="0"
                  width="73"
                  height="57"
                  x="144"
                  y="56"
                ></rect>
                <rect
                  strokeWidth="0"
                  width="73"
                  height="57"
                  x="504"
                  y="168"
                ></rect>
                <rect
                  strokeWidth="0"
                  width="73"
                  height="57"
                  x="720"
                  y="336"
                ></rect>
              </svg>
            </svg>
          </div>
        </div>
        <div className="w-full px-10">
          <div className="relative z-10 flex max-w-2xl space-x-3 p-1.5 bg-white border rounded-xl shadow-lg shadow-gray-900/[.2] dark:bg-gray-800 dark:border-gray-500 dark:shadow-gray-900/[.2]">
            <div className="relative w-full max-w-2xl">
              <label
                htmlFor="hs-search-article-1"
                className="block text-sm font-medium text-gray-700 dark:text-white"
              >
                <span className="sr-only">Cauta Servicii...</span>
              </label>
              <div className="relative flex-[1_0_0%] z-50">
                <input
                  type="text"
                  value={searchTerm}
                  onChange={handleChange}
                  name="hs-search-article-1"
                  id="hs-search-article-1"
                  className="block w-full p-3 border-transparent rounded-md focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-800 dark:text-gray-400"
                  placeholder="Cauta servicii..."
                />
                <div className="absolute transform -translate-y-1/2 top-1/2 right-8">
                  {isLoading ? (
                    <Icons.spinner className="transition-all duration-500 animate-spin" />
                  ) : (
                    <FaSearch />
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div className="relative z-50 w-full h-full pb-72">
        {/* <div className="overflow-hidden" ref={emblaRef}> */}
        <div className="relative embla min-h-[400px] gap-10" ref={emblaRef}>
          {/* <div className="flex gap-10"> */}
          <div className="px-20 embla__container">
            {isLoading
              ? // Show loading indicator
              null
              : searchResults.map((serv, id) => (
                <motion.div
                  key={id}
                  initial={{ opacity: 0.3, x: 50 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.3, delay: 0.1 * id }}
                  className="embla__slide"
                >
                  {/* <Link href={serv.link} className={`w-[400px] relative flex flex-col  h-full  text-xl border bg-white gap-5 px-5 py-5 mt-10  w-2xl max-h-[400px]`}> */}
                  <Link href={serv.link}>
                    <div
                      className={`absolute flex justify-center items-center w-full h-full inset-0 opacity-0 hover:opacity-100 transition-opacity`}
                    >
                      <p>This is an overlay</p>
                    </div>
                    <div>
                      <div>{serv.title}</div>
                      <div>{serv.description}</div>
                    </div>
                    <div>
                      <p>Card Content</p>
                    </div>
                    <div>
                      <p>Card Footer</p>
                    </div>
                  </Link>
                </motion.div>
              ))}
          </div>
          <div className="mt-20 embla__progress">
            <div
              className="embla__progress__bar"
              style={{ transform: `translate3d(${scrollProgress}%,0px,0px)` }}
            />
          </div>
        </div>
      </div>
    </section>
  );
};

export default SearchPage;

/////////////////////////////////////////////////////////////////////////////////////

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider     = "mysql"
//   url          = env("DATABASE_URL")
//   relationMode = "prisma"
// }

// model User {
//   id                   String                @id @default(cuid())
//   firstName            String?
//   lastName             String?
//   name                 String?
//   email                String?               @unique
//   emailVerified        DateTime?
//   password             String?               @db.Text
//   image                String?
//   address              String?
//   active               Boolean?              @default(true)
//   createdAt            DateTime              @default(now())
//   updatedAt            DateTime              @default(now()) @updatedAt
//   balance              Int?                  @default(0)
//   quotes               Quote[] // Added quotes relation
//   invoices             Invoice[] // Added invoices relation
//   payments             Payment[] // Added payments relation
//   note                 String?               @db.Text
//   role                 ROLE
//   accounts             Account[]
//   sessions             Session[]
//   task                 Task[]
//   cars                 Car[]
//   interventionServices InterventionService[]

//   @@index([email])
// }

// model Task {
//   id                   Int                   @id @default(autoincrement())
//   userId               String
//   user                 User                  @relation(fields: [userId], references: [id])
//   title                String
//   description          String?
//   interventionServices InterventionService[]

//   @@index([userId])
// }

// enum ROLE {
//   USER
//   ADMIN
// }

// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([userId, provider, providerAccountId])
//   @@index([userId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique @db.VarChar(512)
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@index([userId])
// }

// model VerificationToken {
//   token   String   @unique
//   expires DateTime
// }

// model Car {
//   id                   Int                   @id @default(autoincrement())
//   make                 String
//   model                String
//   year                 Int
//   ownerId              String
//   owner                User                  @relation(fields: [ownerId], references: [id])
//   specs                Json
//   picture              String
//   interventionServices InterventionService[]
//   carOperations        CarOperations?

//   @@index([ownerId])
// }

// model InterventionService {
//   id     Int    @id @default(autoincrement())
//   userId String
//   user   User   @relation(fields: [userId], references: [id])

//   carId           Int
//   car             Car           @relation(fields: [carId], references: [id])
//   carOperationsId Int
//   carOperations   CarOperations @relation(fields: [carOperationsId], references: [id])
//   timestamp       DateTime      @default(now())
//   tasks           Task[]

//   @@index([userId])
//   @@index([carOperationsId])
//   @@index([carId])
// }

// model CarOperations {
//   id                   Int                   @id @default(autoincrement())
//   name                 String
//   category             String
//   time                 Int
//   price                Float
//   carId                Int                   @unique
//   car                  Car                   @relation(fields: [carId], references: [id])
//   interventionServices InterventionService[]

//   @@index([carId])
// }

// model Quote {
//   id          Int         @id @default(autoincrement())
//   userId      String
//   user        User        @relation(fields: [userId], references: [id])
//   quoteNumber String      @unique
//   date        DateTime
//   items       QuoteItem[]
//   total       Float

//   @@index([userId])
// }

// model QuoteItem {
//   id          Int    @id @default(autoincrement())
//   quoteId     Int
//   quote       Quote  @relation(fields: [quoteId], references: [id])
//   description String
//   quantity    Int
//   price       Float

//   @@index([quoteId])
// }

// model Invoice {
//   id            Int           @id @default(autoincrement())
//   userId        String
//   user          User          @relation(fields: [userId], references: [id])
//   invoiceNumber String        @unique
//   date          DateTime
//   items         InvoiceItem[]
//   total         Float

//   @@index([userId])
// }

// model InvoiceItem {
//   id          Int     @id @default(autoincrement())
//   invoiceId   Int
//   invoice     Invoice @relation(fields: [invoiceId], references: [id])
//   description String
//   quantity    Int
//   price       Float

//   @@index([invoiceId])
// }

// model Payment {
//   id            Int      @id @default(autoincrement())
//   userId        String
//   user          User     @relation(fields: [userId], references: [id])
//   paymentDate   DateTime
//   amount        Float
//   paymentMethod String

//   @@index([userId])
// }

























///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




/**
 * add-new-car-form.jsx
 */

"use client";

import { useForm, SubmitHandler } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { useAddCustomerCarStore } from "@/store/store";

const AddNewCarForm = ({ data }) => {
  const {
    register,
    handleSubmit,
    formState: { errors }
  } = useForm();

  const { make, model, years, setMake, setModel, setYears } = useAddCustomerCarStore();

  const handleMakeChange = (e) => {
    const newMake = e.target.value;
    setMake(newMake);
    setModel(""); // Reset model when changing make
    setYears(""); // Reset years when changing make
  };

  const handleModelChange = (e) => {
    const newModel = e.target.value;
    setModel(newModel);
    setYears(""); // Reset years when changing model
  };

  const handleYearsChange = (e) => {
    const newYears = e.target.value;
    setYears(newYears);
  };

  const makes = [...new Set(data.map((el) => el.make))];
  const models = data.filter((el) => el.make === make).map((el) => el.model);
  const yearsPeriod = [...new Set(data.filter((el) => el.model === model).map((el) => el.productionYears))];

  const onSubmit = (data) => {
    /// Add the check for the VIN befor submitting, and return error if there isn't any

    console.log(data);
  };
  const onVinSubmit = (data) => {
    /// Add the check for the VIN befor submitting, and return error if there isn't any

    console.log(data);
  };

  return (
    <section>
      <div>Form</div>

      <form onSubmit={handleSubmit(onVinSubmit)} className="flex flex-col py-8 space-y-8">
        <div className="flex flex-col ">
          <label>Input VIN number</label>
          <input {...register("vin")} className="px-2 py-1 border border-gray-300 rounded" />
        </div>{" "}
        <Button type="submit">Submit</Button>
      </form>

      <form onSubmit={handleSubmit(onSubmit)} className="flex flex-col py-8 space-y-8">
        <div className="flex flex-col ">
          <div className="flex flex-col ">
            <label>Input VIN number</label>
            <input {...register("vin")} className="px-2 py-1 border border-gray-300 rounded" />
          </div>

          <label for="make">Make</label>
          <select name="make" {...register("make")} onChange={handleMakeChange}>
            <option>Select a Make</option>
            {makes.map((el, idx) => (
              <option key={idx} value={el}>
                {el}
              </option>
            ))}
          </select>
        </div>
        <div className="flex flex-col ">
          <label>Model</label>
          <select {...register("model")} onChange={handleModelChange}>
            <option>Select a Model</option>
            {models.map((el, idx) => (
              <option key={idx} value={el}>
                {el}
              </option>
            ))}
          </select>
        </div>
        <div className="flex flex-col ">
          <label>Production Years</label>
          <select {...register("productionYears")} onChange={handleYearsChange}>
            <option>Select a Year Period</option>
            {yearsPeriod.map((el, idx) => (
              <option key={idx} value={el}>
                {el}
              </option>
            ))}
          </select>
        </div>
        <div className="flex flex-col ">
          <input defaultValue="test" {...register("example")} className="px-2 py-1 border border-gray-300 rounded" />
        </div>
        <div className="flex flex-col ">
          <input {...register("example123", { required: true })} className="px-2 py-1 border border-gray-300 rounded" />
          {errors.example123 && <span className="text-red-600">This field is required</span>}
        </div>
        <div className="flex flex-col ">
          <input {...register("exampleRequired", { required: true })} className="px-2 py-1 border border-gray-300 rounded" />
          {errors.exampleRequired && <span className="text-red-600">This field is required</span>}
        </div>
        <Button type="submit">Submit</Button>
      </form>
    </section>
  );
};

export default AddNewCarForm;








///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



























///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



const { make, model, years, setMake, setModel, setYears } = useAddCustomerCarStore();

const {
  register,
  handleSubmit,
  formState: { errors }
} = useForm();

const handleMakeChange = (e) => {
  const newMake = e.target.value;
  setMake(newMake);
  setModel(""); // Reset model when changing make
  setYears(""); // Reset years when changing make
};

const handleModelChange = (e) => {
  const newModel = e.target.value;
  setModel(newModel);
  setYears(""); // Reset years when changing model
};

const handleYearsChange = (e) => {
  const newYears = e.target.value;
  setYears(newYears);
};

const makes = [...new Set(data.map((el) => el.make))];
const models = data.filter((el) => el.make === make).map((el) => el.model);
const yearsPeriod = [...new Set(data.filter((el) => el.model === model).map((el) => el.productionYears))];

// const submit = (data) => {
//   /// Add the check for the VIN befor submitting, and return error if there isn't any

//   // vinDecoderReq();
//   console.log(data);
// };

<form onSubmit={handleSubmit(onSubmit)} className="flex flex-col py-8 space-y-8">
  <div className="flex flex-col ">
    <div className="flex flex-col ">
      <label>Input VIN number</label>
      <input {...register("vin")} className="px-2 py-1 border border-gray-300 rounded" />
    </div>

    <label htmlFor="make">Make</label>
    <input defaultValue={"BMW"} {...register("example123", { required: true })} disabled className="px-2 py-1 border border-gray-500 rounded" />
  </div>

  <div className="flex flex-col ">
    <input {...register("example123", { required: true })} className="px-2 py-1 border border-gray-300 rounded" />
    {errors.example123 && <span className="text-red-600">This field is required</span>}
  </div>
  <div className="flex flex-col ">
    <input {...register("exampleRequired", { required: true })} className="px-2 py-1 border border-gray-300 rounded" />
    {errors.exampleRequired && <span className="text-red-600">This field is required</span>}
  </div>
  <Button type="submit">Submit</Button>
</form>



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

















///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





// export async function vinDecoderReq(prevState, formData) {
//   try {
//     // if (!await formData.get("vin")) {
//     //   return { message: "error" }
//     // }
//     const vin = await formData.get("vin")
//     const res = await fetch(`http://localhost:3000/vin-decoder`, {
//       method: "POST",
//       data: JSON.stringify(vin),
//       headers: 'application/json'
//     })
//     // console.log(res)
//     const data = await res.json()

//     // console.log(res)
//     // const

//     return { message: "Success", make: data.make, model: data.model }
//   } catch (error) {
//     return { message: "Error" }
//   }
// }





///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

















///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////











<div className="h-full w-full bg-gradient-to-b from-transparent via-neutral-200 to-transparent dark:via-neutral-700 ">
  </div>








///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////











///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


{
  /* <div className="absolute bottom-0 left-0 right-0 z-0 h-[15%] w-full bg-gradient-to-b from-transparent via-transparent to-[#ecedef] dark:to-[#2b2b2b]"></div> */
}

// <ul className="divide-y divide-gray-300">
//   {[services].map((service, idx) => (
//     <li key={idx} className="flex items-center justify-between py-3">
//       <div className="flex gap-2 ">
//         <div>{idx + 1}.</div>
//         <span className="">{service.title}</span>
//         <span className="text-gray-600">${service.price}</span>
//       </div>
//       <button onClick={() => handleAddToCart(service)} className="px-4 py-1 text-white bg-blue-500 rounded hover:bg-blue-600">
//         Add to Cart
//       </button>
//     </li>
//   ))}
// </ul>

{
  // /* <div className=" grid min-h-[calc(100vh-3.5rem)] grid-cols-12 border-x border-dashed ">
  //         <div className="relative col-span-1">
  //           <div className="top-0 left-0 w-full h-full">
  //             <div className="absolute left-0  h-full w-full bg-gradient-to-r from-transparent via-transparent to-[#f9fafc] dark:to-[#2b2b2b]"></div>
  //             <div className="absolute left-0 top-0 h-[15%] w-full bg-gradient-to-t from-transparent via-transparent to-[#FFFFFF] dark:to-[#2e2e2e]"></div>
  //           </div>
  //         </div>
  //         <div className="w-full h-full col-span-8 px-5"></div> */
}



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
















{
  /* <div className="absolute bottom-0 left-0 right-0 z-0 h-[15%] w-full bg-gradient-to-b from-transparent via-transparent to-[#ecedef] dark:to-[#2b2b2b]"></div> */
}

// <ul className="divide-y divide-gray-300">
//   {[services].map((service, idx) => (
//     <li key={idx} className="flex items-center justify-between py-3">
//       <div className="flex gap-2 ">
//         <div>{idx + 1}.</div>
//         <span className="">{service.title}</span>
//         <span className="text-gray-600">${service.price}</span>
//       </div>
//       <button onClick={() => handleAddToCart(service)} className="px-4 py-1 text-white bg-blue-500 rounded hover:bg-blue-600">
//         Add to Cart
//       </button>
//     </li>
//   ))}
// </ul>

{
  // /* <div className=" grid min-h-[calc(100vh-3.5rem)] grid-cols-12 border-x border-dashed ">
  //         <div className="relative col-span-1">
  //           <div className="top-0 left-0 w-full h-full">
  //             <div className="absolute left-0  h-full w-full bg-gradient-to-r from-transparent via-transparent to-[#f9fafc] dark:to-[#2b2b2b]"></div>
  //             <div className="absolute left-0 top-0 h-[15%] w-full bg-gradient-to-t from-transparent via-transparent to-[#FFFFFF] dark:to-[#2e2e2e]"></div>
  //           </div>
  //         </div>
  //         <div className="w-full h-full col-span-8 px-5"></div> */
}






















///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





{/* <section className="h-full w-full">
<section className="grid-cols-16 relative mx-auto grid h-full  min-h-[calc(100vh-3.5rem)] bg-white">
  <div className="relative col-span-12 h-full w-full  p-2 xl:col-span-4 xl:px-10"></div>
  <div className="relative col-span-12 h-full w-full  p-2 xl:col-span-9 xl:px-10">
    <div className="flex h-full max-h-[180px] w-full">
      <div className="flex h-full w-2/3 pt-10">
        <div className="mx-auto flex h-full w-1/2 flex-col ">
          <div className="font-serif text-3xl">Search Service...</div>
          <div className="font-serif text-sm">We offer over 300 services to choose from:</div>
        </div>
      </div>
      <div className="relative flex h-full w-1/3 items-end">
        <div className="relative h-full w-full">
          <Image src={carImage || "/2019_mb_g63_amg_0000-first-side.png"} alt="asdasd" width={500} height={500} priority className="h-full w-full scale-x-[-1] transform object-contain" />
        </div>
      </div>
    </div>
    {/* <div className="supports-backdrop-blur:bg-neutral-100/60 relative -top-10 mx-auto h-auto min-h-[6rem] bg-neutral-100/70 backdrop-blur dark:bg-neutral-600"> */}
    <div className="supports-backdrop-blur:bg-neutral-100/60 relative -top-10 mx-auto h-auto min-h-[6rem] rounded-t-lg bg-gradient-to-r from-neutral-700 via-neutral-700/80 to-neutral-700/30  pb-4 pt-2  backdrop-blur dark:bg-neutral-100/70">
      {!edit ? (
        <div className="mx-auto grid max-w-[80%] grid-cols-4 gap-5 py-3 ">
          <div className="col-span-1 flex flex-col gap-2">
            <label className="text-sm text-neutral-700 dark:text-neutral-400">Make:</label>
            <select
              onChange={(e) => handleMakeChange(e)}
              value={make}
              className="w-full rounded-lg border border-neutral-600 bg-neutral-50 p-1 disabled:bg-neutral-300 dark:bg-neutral-400 dark:disabled:bg-neutral-800"
            >
              <option value="">Select a Make</option>
              {[...makes].map((el, idx) => (
                <option key={idx} value={el}>
                  {el}
                </option>
              ))}
            </select>
          </div>

          <div className="col-span-1 flex flex-col gap-2">
            <label className="text-sm text-neutral-700 dark:text-neutral-400">Model:</label>
            <select
              value={model}
              onChange={(e) => handleModelChange(e)}
              className="w-full rounded-lg border border-neutral-600 bg-neutral-50 p-1 disabled:bg-neutral-300 dark:bg-neutral-400 dark:disabled:bg-neutral-800"
              disabled={!make}
            >
              <option value="">Select a Model</option>
              {[...models].map((el, idx) => (
                <option key={idx} value={el}>
                  {el}
                </option>
              ))}
            </select>
          </div>

          <div className="col-span-1 flex flex-col gap-2">
            <label className="text-sm text-neutral-700 dark:text-neutral-400">Years:</label>
            <select
              value={years}
              onChange={(e) => handleYearsChange(e)}
              className="w-full rounded-lg border border-neutral-600 bg-neutral-50 p-1 disabled:bg-neutral-300 dark:bg-neutral-400 dark:disabled:bg-neutral-800"
              disabled={!model}
            >
              <option value="">Select years</option>
              {[...yearsPeriod].map((el, idx) => (
                <option key={idx} value={el}>
                  {el}
                </option>
              ))}
            </select>
          </div>
          <div className="col-span-1 flex items-end">
            <Button variant="link" onClick={() => setEdit(!edit)}>
              Save
            </Button>
          </div>
        </div>
      ) : (
        <div className="mx-auto flex max-w-[80%] flex-col gap-1 py-3">
          <div className="pl-2 text-sm text-neutral-200 dark:text-neutral-800 ">Available services for:</div>
          <div className="grid grid-cols-5 gap-2 overflow-hidden whitespace-nowrap bg-white text-sm dark:bg-neutral-700 ">
            <div className="col-span-1 flex items-center justify-center gap-1.5 overflow-hidden">
              <span>Make:</span>
              <span className="font-semibold">{make}</span>
            </div>
            <div className="col-span-1 flex items-center justify-center gap-1.5 overflow-hidden">
              <span>Model:</span>
              <span className="font-semibold">{model}</span>
            </div>
            <div className="col-span-1 flex items-center justify-center gap-1.5 overflow-hidden">
              <span>Variant:</span>
              <span className="font-semibold">{years}</span>
            </div>
            <div className="col-span-1 flex items-center justify-center gap-1.5 overflow-hidden">
              <span>Years:</span>
              <span className="font-semibold">{years}</span>
            </div>
            <div className="col-span-1 flex items-center justify-center">
              <Button variant="link" className="" onClick={() => setEdit(!edit)}>
                X Modify
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
    <div className="px-10 ">
      <StoreCategoryCards data={services} />
    </div>
    <div className="flex h-full max-h-[250px] w-full">
      <div className="relative flex h-full w-1/3 items-end">
        <div className="relative h-full w-full">
          <Image src={carImage || "/2019_mb_g63_amg_0000-first-side.png"} alt="asdasd" width={500} height={500} priority className="h-full w-full transform object-contain" />
        </div>
      </div>
      <div className="flex h-full w-2/3 justify-center pt-10">
        <div className="flex h-1/2 w-1/2 flex-col justify-between">
          <div className="font-serif text-3xl">Search Service...</div>
          <Button>Contact-Us </Button>
        </div>
      </div>
    </div>
  </div >
  <div className="relative col-span-12 h-full xl:col-span-3">
    <div className="absolute left-0 top-0 z-10 h-full w-full pb-20">
      <div className="mx-auto w-full max-w-[90%] py-5 text-lg font-semibold">Cart:</div>
      <div className=" sticky  top-10 mx-auto w-full max-w-[90%] rounded-lg border border-neutral-300 bg-white px-5 py-10 shadow-md dark:border-neutral-500 dark:bg-neutral-700 xl:px-10 xl:py-10">
        <div>
          <div>
            <div className="mb-2 font-semibold ">Car:</div>
            <div>
              {make}, {model}, {years}
            </div>
          </div>
          <hr className="my-3" />
          <div className="mb-2 text-center font-semibold">Summary</div>
          <div className="grid grid-cols-7">
            <div className="col-span-5">Name</div>
            <div className="col-span-1">Price</div>
            <div className="col-span-1"></div>
          </div>
          <div className="max-h-[500px] overflow-auto">
            {cartItems.map((item) => (
              <div key={item.id} className="my-2 bg-slate-50 dark:bg-neutral-800 dark:text-white">
                <div className="grid grid-cols-7">
                  <div className="col-span-5 flex items-center  overflow-hidden px-2 py-1 text-sm">{item.title}</div>
                  <div className="col-span-1 flex  items-center  justify-center py-1 text-sm">${item.price}</div>
                  <button className="col-span-1  flex items-center justify-center py-1" onClick={() => removeOneFromCart(item.id)}>
                    x
                  </button>
                </div>
              </div>
            ))}
          </div>
          <div className="mt-4 flex justify-between py-3">
            <button onClick={clearCart} className="text-neutral-500 underline underline-offset-2">
              Clear
            </button>
            <p className="font-bold">Total: ${getTotalCost()}</p>
          </div>
          <Button className="mt-5 w-full" variant={cartItems.length > 0 ? "" : "outline"} disabled={!(cartItems.length > 0)}>
            Make Reservation
          </Button>
        </div>
      </div>
    </div>
    {/* <div className="absolute left-0 right-0 h-full w-[50%] bg-gradient-to-l from-transparent via-transparent to-[#f9fafc] dark:to-[#2b2b2b]"></div> */}
    <div className="absolute left-0 right-0 h-full w-[50%] bg-gradient-to-l from-transparent via-transparent to-[#f3f3f3] dark:to-[#2b2b2b]"></div>
    <div className="absolute right-0 top-0 h-[15%] w-full bg-gradient-to-t from-transparent via-transparent to-[#FFFFFF] dark:to-[#2e2e2e]"></div>
    <div className="absolute bottom-0 right-0 h-[15%] w-full bg-gradient-to-b from-transparent via-transparent to-[#FFFFFF] dark:to-[#2e2e2e]"></div>
  </div>
</section >
</section > * /}





  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////












  < section className = "h-full w-full" >
    <section className="grid-cols-16 relative mx-auto grid h-full  min-h-[calc(100vh-3.5rem)] bg-white px-[10%]">
      <div className="relative hidden h-full w-full xl:col-span-1  xl:block ">
        <div className="absolute  right-0 h-full w-full bg-gradient-to-r from-transparent via-transparent to-[#f3f3f3] dark:to-[#2b2b2b]"></div>
        <div className="absolute right-0 top-0 h-[15%] w-full bg-gradient-to-t from-transparent via-transparent to-[#FFFFFF] dark:to-[#2e2e2e]"></div>
        <div className="absolute bottom-0 right-0 h-[15%] w-full bg-gradient-to-b from-transparent via-transparent to-[#FFFFFF] dark:to-[#2e2e2e]"></div>
      </div>
      <div className="col-span-16 relative h-full w-full  p-2 xl:col-span-11 xl:px-10">
        <div className="flex h-full max-h-[180px] w-full">
          <div className="flex h-full w-2/3 pt-10">
            <div className="mx-auto flex h-full w-1/2 flex-col ">
              <div className="font-serif text-3xl">Search Service...</div>
              <div className="font-serif text-sm">We offer over 300 services to choose from:</div>
            </div>
          </div>
          <div className="relative flex h-full w-1/3 items-end">
            <div className="relative h-full w-full">
              <Image src={carImage || "/2019_mb_g63_amg_0000-first-side.png"} alt="asdasd" width={500} height={500} priority className="h-full w-full scale-x-[-1] transform object-contain" />
            </div>
          </div>
        </div>
        <div className="supports-backdrop-blur:bg-neutral-100/60 relative -top-10 mx-auto h-auto min-h-[6rem] bg-neutral-100/70 backdrop-blur dark:bg-neutral-600">
          {!edit ? (
            <div className="mx-auto grid max-w-[80%] grid-cols-4 gap-5 py-3 ">
              <div className="col-span-1 flex flex-col gap-2">
                <label className="text-sm text-neutral-700 dark:text-neutral-400">Make:</label>
                <select
                  onChange={(e) => handleMakeChange(e)}
                  value={make}
                  className="w-full rounded-lg border border-neutral-600 bg-neutral-50 p-1 disabled:bg-neutral-300 dark:bg-neutral-400 dark:disabled:bg-neutral-800"
                >
                  <option value="">Select a Make</option>
                  {[...makes].map((el, idx) => (
                    <option key={idx} value={el}>
                      {el}
                    </option>
                  ))}
                </select>
              </div>

              <div className="col-span-1 flex flex-col gap-2">
                <label className="text-sm text-neutral-700 dark:text-neutral-400">Model:</label>
                <select
                  value={model}
                  onChange={(e) => handleModelChange(e)}
                  className="w-full rounded-lg border border-neutral-600 bg-neutral-50 p-1 disabled:bg-neutral-300 dark:bg-neutral-400 dark:disabled:bg-neutral-800"
                  disabled={!make}
                >
                  <option value="">Select a Model</option>
                  {[...models].map((el, idx) => (
                    <option key={idx} value={el}>
                      {el}
                    </option>
                  ))}
                </select>
              </div>

              <div className="col-span-1 flex flex-col gap-2">
                <label className="text-sm text-neutral-700 dark:text-neutral-400">Years:</label>
                <select
                  value={years}
                  onChange={(e) => handleYearsChange(e)}
                  className="w-full rounded-lg border border-neutral-600 bg-neutral-50 p-1 disabled:bg-neutral-300 dark:bg-neutral-400 dark:disabled:bg-neutral-800"
                  disabled={!model}
                >
                  <option value="">Select years</option>
                  {[...yearsPeriod].map((el, idx) => (
                    <option key={idx} value={el}>
                      {el}
                    </option>
                  ))}
                </select>
              </div>
              <div className="col-span-1 flex items-end">
                <Button variant="link" onClick={() => setEdit(!edit)}>
                  Save
                </Button>
              </div>
            </div>
          ) : (
            <div className="mx-auto flex max-w-[80%] flex-col gap-1 py-3">
              <div className="pl-2 text-sm text-neutral-200 dark:text-neutral-800 ">Available services for:</div>
              <div className="grid grid-cols-5 gap-2 overflow-hidden whitespace-nowrap bg-white text-sm dark:bg-neutral-700 ">
                <div className="col-span-1 flex items-center justify-center gap-1.5 overflow-hidden">
                  <span>Make:</span>
                  <span className="font-semibold">{make}</span>
                </div>
                <div className="col-span-1 flex items-center justify-center gap-1.5 overflow-hidden">
                  <span>Model:</span>
                  <span className="font-semibold">{model}</span>
                </div>
                <div className="col-span-1 flex items-center justify-center gap-1.5 overflow-hidden">
                  <span>Variant:</span>
                  <span className="font-semibold">{years}</span>
                </div>
                <div className="col-span-1 flex items-center justify-center gap-1.5 overflow-hidden">
                  <span>Years:</span>
                  <span className="font-semibold">{years}</span>
                </div>
                <div className="col-span-1 flex items-center justify-center">
                  <Button variant="link" className="" onClick={() => setEdit(!edit)}>
                    X Modify
                  </Button>
                </div>
              </div>
            </div>
          )}
        </div>
        <div className="px-10 ">
          <StoreCategoryCards data={services} />
        </div>
        <div className="flex h-full max-h-[250px] w-full">
          <div className="relative flex h-full w-1/3 items-end">
            <div className="relative h-full w-full">
              <Image src={carImage || "/2019_mb_g63_amg_0000-first-side.png"} alt="asdasd" width={500} height={500} priority className="h-full w-full transform object-contain" />
            </div>
          </div>
          <div className="flex h-full w-2/3 justify-center pt-10">
            <div className="flex h-1/2 w-1/2 flex-col justify-between">
              <div className="font-serif text-3xl">Search Service...</div>
              <Button>Contact-Us </Button>
            </div>
          </div>
        </div>
      </div>
      <div className="col-span-16 relative h-full w-full xl:col-span-4">
        <div className="absolute left-0 top-0 z-10 h-full w-full pb-20">
          <div className="mx-auto w-full max-w-[90%] py-5 text-lg font-semibold">Cart:</div>
          <div className=" sticky  top-10 mx-auto w-full max-w-[90%] rounded-lg border border-neutral-300 bg-white px-5 py-10 shadow-md dark:border-neutral-500 dark:bg-neutral-700 xl:px-10 xl:py-10">
            <div>
              <div>
                <div className="mb-2 font-semibold ">Car:</div>
                <div>
                  {make}, {model}, {years}
                </div>
              </div>
              <hr className="my-3" />
              <div className="mb-2 text-center font-semibold">Summary</div>
              <div className="grid grid-cols-7">
                <div className="col-span-5">Name</div>
                <div className="col-span-1">Price</div>
                <div className="col-span-1"></div>
              </div>
              <div className="max-h-[500px] overflow-auto">
                {cartItems.map((item) => (
                  <div key={item.id} className="my-2 bg-slate-50 dark:bg-neutral-800 dark:text-white">
                    <div className="grid grid-cols-7">
                      <div className="col-span-5 flex items-center  overflow-hidden px-2 py-1 text-sm">{item.title}</div>
                      <div className="col-span-1 flex  items-center  justify-center py-1 text-sm">${item.price}</div>
                      <button className="col-span-1  flex items-center justify-center py-1" onClick={() => removeOneFromCart(item.id)}>
                        x
                      </button>
                    </div>
                  </div>
                ))}
              </div>
              <div className="mt-4 flex justify-between py-3">
                <button onClick={clearCart} className="text-neutral-500 underline underline-offset-2">
                  Clear
                </button>
                <p className="font-bold">Total: ${getTotalCost()}</p>
              </div>
              <Button className="mt-5 w-full" onClick={() => router.push(`/`)} variant={cartItems.length > 0 ? "" : "outline"} disabled={!(cartItems.length > 0)}>
                Make Reservation
              </Button>
            </div>
          </div>
        </div>
        <div className="absolute left-0 right-0 h-full w-[50%] bg-gradient-to-l from-transparent via-transparent to-[#f3f3f3] dark:to-[#2b2b2b]"></div>
        <div className="absolute right-0 top-0 h-[15%] w-full bg-gradient-to-t from-transparent via-transparent to-[#FFFFFF] dark:to-[#2e2e2e]"></div>
        <div className="absolute bottom-0 right-0 h-[15%] w-full bg-gradient-to-b from-transparent via-transparent to-[#FFFFFF] dark:to-[#2e2e2e]"></div>
      </div>
      {/* <div className="col-span-16 mt-32 flex h-10 items-center justify-center bg-neutral-100 text-sm">@Copywrite Auto-Nel</div> */}
    </section>
</ >





///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////